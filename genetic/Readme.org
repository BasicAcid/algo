* Genetic approach of the Travelling salesman problem
Given a list of cities and the distances between each pair of cities,
what is the shortest possible route that visits each city and returns
to the origin city ?

A bruteforce approach to this problem is technically impossible for a
consequent number of cities because it requires fact(n) trials (where
n is the number of cities).

For the example we will consider the computation time on an imaginary 4GHz CPU:

|  n |                      factorial(n) |                       t(s) | t(centuries)       |
|----+-----------------------------------+----------------------------+--------------------|
| 10 |                           3628800 |                     0.9072 | ~0                 |
| 20 |               2432902008176640000 |              608225502045. | ~192               |
| 30 | 265252859812191058636308480000000 | 66313214953047764659077120 | ~21013389786627552 |

Such time is not very practical.

By employing a Genetic Algorithms, we can generate several population of
solutions, and make them adapt through generations.

** Input Data
Each city is caracterised by its name and its coordinates, as given
below in JSON format:
#+BEGIN_SRC js
[{"city":"Bordeaux","lan":":44.847807","lng":"-0.579472"},
 {"city":"Pau","lan":":43.293295","lng":"-0.363570"},
 {"city":"Nantes","lan":":47.215585","lng":"-1.554908"},
 {"city":"Paris","lan":":48.854885","lng":"2.338646"},
 {"city":"Lille","lan":":50.608719","lng":"3.063295"},
 {"city":"Marseille","lan":":43.293551","lng":"5.377397"},
 {"city":"Nice","lan":":43.701680","lng":"7.260711"},
 {"city":"Lyon","lan":":45.759132","lng":"4.834604"},
 {"city":"Montpellier","lan":":43.586120","lng":"3.896094"},
 {"city":"Toulouse","lan":":43.533513","lng":"1.411209"},
 {"city":"Brest","lan":":48.389353","lng":"-4.488616"},
 {"city":"Limoges","lan":":45.838771","lng":"1.262108"},
 {"city":"Clermont-Ferrand","lan":":45.780535","lng":"3.093242"},
 {"city":"Tours","lan":":47.404355","lng":"0.688930"},
 {"city":"Strasbourg","lan":":48.540395","lng":"7.727753"}]
#+END_SRC

** Algorithm

 |    | Population |     |
 |----+------------+-----|
 |    |        200 |     |
 | 20 |         50 | 50% |
 | 12 |         50 | 30% |
 |  6 |         50 | 15% |
 |  2 |         50 |  5% |

# From here https://iccl.inf.tu-dresden.de/w/images/b/b7/GA_for_TSP.pdf
1. Convert coordinates value to binary.
2. Generate a population of 200 solutions.
3. Evaluate fitness for each solutions.
4. Select parents from population.
5. Choose at random a pair of parents for mating.  Exchange bit strings
with the one-point crossover to create two offspring.
6. Process each offspring by the mutation operator, and insert the
resulting offspring in the new population.
7. Repeat steps 5 and 6 until all parents are selected and mated (P
offspring are created).
8. Replace the old population of chromosomes by the new one.
9. Evaluate the fitness of each chromosome in the new population.
10. Go back to step 4 if the number of generations is less than some upper
bound.  Otherwise, the final result is the best chromosome created
during the sea.
